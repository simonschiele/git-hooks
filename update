#!/bin/bash

warnInvalidXML=$(git config --bool hook.warnInvalidXML)
blockInvalidXML=$(git config --bool hook.blockInvalidXML)
warnInvalidPHPSyntax=$(git config --bool hook.warnInvalidPHPSyntax)
blockInvalidPHPSyntax=$(git config --bool hook.blockInvalidPHPSyntax)
warnExtension=$(git config --bool hook.warnExtension)
warnExtensionTypes=$(git config hook.warnExtensionTypes)
warnExtensionMsg=$(git config hook.warnExtensionMsg)
blockExtension=$(git config --bool hook.blockExtension)
blockExtensionTypes=$(git config hook.blockExtensionTypes)
blockExtensionMsg=$(git config hook.blockExtensionMsg)

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
if [ "$newrev" = "0000000000000000000000000000000000000000" ]; then
	newrev_type=delete
else
	newrev_type=$(git-cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	
    refs/tags/*,commit)
        ;;
	
    refs/tags/*,delete)
        # delete tag
		;;
	
    refs/tags/*,tag)
		# annotated tag
		;;
	
    refs/heads/*,commit)
          
        # warn/block on invalid PHP Syntax
          if [ "$warnInvalidPHPSyntax" = "true" ] || [ "$blockInvalidPHPSyntax" = "true" ] 
          then
              . hooks/phpSyntax
          fi
  
        # warn/block on invalid xml 
          if [ "$warnInvalidXML" = "true" ] || [ "$blockInvalidXML" = "true" ] 
          then
              . hooks/xmlValidate
          fi
  
        # warn/block on forbidden extensions 
          if [ "$warnExtension" = "true" ] || [ "$blockExtension" = "true" ] 
          then
              . hooks/checkExtension
          fi
		;;
	
    refs/heads/*,delete)
		# delete branch
		;;
	
    refs/remotes/*,commit)
		# tracking branch
		;;
	
    refs/remotes/*,delete)
		# delete tracking branch
		;;
	
    *)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

exit 0
