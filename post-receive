#!/bin/bash
#
# This script is run after receive-pack has accepted a pack and the
# repository has been updated.  It is passed arguments in through stdin
# in the form
#  <oldrev> <newrev> <refname>
# For example:
#  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master
#

deployOnTag=$(git config --bool hooks.deployOnTag)
deployOnTagTargets=$(git config hooks.deployOnTagTargets)
deployOnPush=$(git config --bool hooks.deployOnPush)
deployOnPushTargets=$(git config hooks.deployOnPushTargets)
publishHomeRepo=$(git config --bool hooks.publishHomeRepo)
sendEmail=$(git config --bool hooks.sendEmail)

# colors 
[ -r hooks/colors.sh ] && . hooks/colors.sh

deploy() {
    if [ ${1} = "local" ]
    then
        echo -e "\nDeploying locally on $( hostname ) to '${2}'"
        cd "${2}"
        unset GIT_DIR
        if ( git pull )
        then
            echo -e "${Green}Deployed SUCCESSFUL${Normal}\n"
        else
            echo -e "${Red}Something went wrong. Please check repo state manually.${Normal}\n"
        fi
    elif [ ! -r ${1} ]
    then
        echo "${Red}Error:{$Normal} Could not read deploy key ${1}"  
    else
        echo
        eval `ssh-agent` >/dev/null 
        ssh-add ${1} >/dev/null 2>&1
        if ( ssh -o "StrictHostKeyChecking no" -l deploy ${2} "echo -n" )
        then
            echo -e "${Green}Deployed SUCCESSFUL${Normal}\n"
        else
            echo -e "${Red}Something went wrong. Please check repo state manually.${Normal}\n"
        fi
        kill -9 $SSH_AGENT_PID
    fi
}

if [ "$deployOnTag" = "true" ]
then
    if [ -z "$deployOnTagTargets" ] || ! ( echo "$deployOnTagTargets" | grep -q "@" )
    then
        echo "Error while executing deployOnTag hook:"
        echo "Please define valid deployOnTagTargets in the repo config files. See README for help and example."
        exit 1
    fi

    for nextTarget in $delpoyOnTagTargets
    do
        type=$( echo "$nextTarget" | cut -f"1" -d"@" )
        where=$( echo "$nextTarget" | cut -f"2" -d"@" )
        
        deploy "$type" "$where"
    done
fi

if [ "$deployOnPush" = "true" ]
then
    if [ -z "$deployOnPushTargets" ] || ! ( echo "$deployOnPushTargets" | grep -q "@" )
    then
        echo "Error while executing deployOnPush hook:"
        echo "Please define valid deployOnPushTargets in the repo config files. See README for help and example."
        exit 1
    fi
    
    for nextTarget in $( echo "$deployOnPushTargets" | sed "s|,| |g" )
    do
        type=$( echo "$nextTarget" | cut -f"1" -d"@" )
        where=$( echo "$nextTarget" | cut -f"2" -d"@" )
        
        deploy "$type" "$where"
    done
fi

if [ "$publishHomeRepo" = "true" ]
then
    . hooks/publishHomeRepo
fi

if [ "$sendEmail" = "true" ]
then
    . hooks/post-receive_email
fi

